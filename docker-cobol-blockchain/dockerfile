FROM ubuntu:20.04

# Set non-interactive to avoid prompts during build
ENV DEBIAN_FRONTEND=noninteractive

# Update mirror to a more reliable one (optional)
RUN sed -i 's/archive.ubuntu.com/us.archive.ubuntu.com/g' /etc/apt/sources.list

# Install only what we need with retry logic
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gnucobol \
    python3 \
    python3-pip \
    curl \
    || (apt-get update && apt-get install -y --no-install-recommends \
    gnucobol \
    python3 \
    python3-pip \
    curl) \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages for blockchain
RUN pip3 install flask requests google-cloud-pubsub

WORKDIR /app
RUN mkdir -p data logs

# Create sample data files
RUN echo "MASTER001 Master Record 1" > data/master.dat

# Create a simple Python web server
RUN cat > /app/server.py << 'EOF'
#!/usr/bin/env python3
from flask import Flask, jsonify
from datetime import datetime
import json
import threading
import time
import os

app = Flask(__name__)

@app.route('/')
def home():
    return '''
    <html>
    <body style="font-family: Arial; padding: 40px; background: #f5f5f5;">
        <div style="max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <h1>🔗 COBOL Blockchain System</h1>
            <div style="background: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h3>✅ Status: Running</h3>
                <p>Container: cobol-metadata-node</p>
            </div>
            <h3>Endpoints:</h3>
            <ul>
                <li><a href="/health">Health Check</a></li>
                <li><a href="/metrics">Metrics</a></li>
            </ul>
        </div>
    </body>
    </html>
    '''

@app.route('/health')
def health():
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'container': 'cobol-metadata-node',
        'services': {
            'web': 'running',
            'adapter': 'running' if os.path.exists('/app/logs/adapter.log') else 'starting'
        }
    })

@app.route('/metrics')
def metrics():
    return f"cobol_blockchain_health 1\ncobol_blockchain_uptime_seconds {int(time.time() - start_time)}", 200, {'Content-Type': 'text/plain'}

def adapter_loop():
    """Background adapter that writes logs"""
    os.makedirs('/app/logs', exist_ok=True)
    while True:
        try:
            log_entry = {
                'timestamp': datetime.now().isoformat(),
                'type': 'heartbeat',
                'status': 'running'
            }
            with open('/app/logs/adapter.log', 'a') as f:
                f.write(json.dumps(log_entry) + '\n')
            print(f"Adapter heartbeat: {log_entry['timestamp']}")
            time.sleep(30)
        except Exception as e:
            print(f"Adapter error: {e}")
            time.sleep(5)

if __name__ == '__main__':
    start_time = time.time()
    
    # Start adapter in background thread
    adapter_thread = threading.Thread(target=adapter_loop, daemon=True)
    adapter_thread.start()
    
    # Start Flask server
    print("Starting COBOL Blockchain System on port 8080...")
    app.run(host='0.0.0.0', port=8080)
EOF

RUN chmod +x /app/server.py

EXPOSE 8080

HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the Python server directly
CMD ["python3", "/app/server.py"]