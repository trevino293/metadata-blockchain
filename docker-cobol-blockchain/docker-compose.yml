version: '3.8'

networks:
  blockchain-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16
          gateway: 172.25.0.1

volumes:
  orderer-data:
  peer-data:
  cobol-data:
  cobol-logs:
  crypto-config:
  channel-artifacts:

services:
  # Crypto generation container - runs once to setup materials
  crypto-gen:
    image: hyperledger/fabric-tools:2.5
    container_name: crypto-gen
    command: |
      bash -c '
        echo "Setting up crypto materials and genesis block..."
        
        # Only generate if not exists
        if [ ! -d "/crypto-config/ordererOrganizations" ]; then
          echo "Generating crypto materials..."
          
          # Create crypto-config.yaml with NodeOUs disabled
          cat > /tmp/crypto-config.yaml <<EOF
      OrdererOrgs:
        - Name: Orderer
          Domain: example.com
          EnableNodeOUs: false
          Specs:
            - Hostname: orderer
              SANS:
                - localhost
                - orderer.example.com
                - 172.25.0.10

      PeerOrgs:
        - Name: Org1
          Domain: org1.example.com
          EnableNodeOUs: false
          Template:
            Count: 1
            SANS:
              - localhost
              - peer0.org1.example.com
              - 172.25.0.20
          Users:
            Count: 1
      EOF
          
          cryptogen generate --config=/tmp/crypto-config.yaml --output="/crypto-config"
          
          # Create config.yaml for each MSP to disable NodeOUs
          find /crypto-config -name msp -type d | while read mspdir; do
            cat > "$mspdir/config.yaml" <<EOF
      NodeOUs:
        Enable: false
      EOF
          done
          
          echo "Crypto materials generated"
        fi
        
        if [ ! -f "/channel-artifacts/genesis.block" ]; then
          echo "Generating genesis block..."
          
          # Create configtx.yaml
          cat > /tmp/configtx.yaml <<EOF
      Organizations:
          - &OrdererOrg
              Name: OrdererOrg
              ID: OrdererMSP
              MSPDir: /crypto-config/ordererOrganizations/example.com/msp
              Policies:
                  Readers:
                      Type: Signature
                      Rule: "OR('\''OrdererMSP.member'\'')"
                  Writers:
                      Type: Signature
                      Rule: "OR('\''OrdererMSP.member'\'')"
                  Admins:
                      Type: Signature
                      Rule: "OR('\''OrdererMSP.admin'\'')"

          - &Org1
              Name: Org1MSP
              ID: Org1MSP
              MSPDir: /crypto-config/peerOrganizations/org1.example.com/msp
              Policies:
                  Readers:
                      Type: Signature
                      Rule: "OR('\''Org1MSP.admin'\'', '\''Org1MSP.peer'\'', '\''Org1MSP.client'\'')"
                  Writers:
                      Type: Signature
                      Rule: "OR('\''Org1MSP.admin'\'', '\''Org1MSP.client'\'')"
                  Admins:
                      Type: Signature
                      Rule: "OR('\''Org1MSP.admin'\'')"
                  Endorsement:
                      Type: Signature
                      Rule: "OR('\''Org1MSP.peer'\'')"

      Capabilities:
          Channel: &ChannelCapabilities
              V2_0: true
          Orderer: &OrdererCapabilities
              V2_0: true
          Application: &ApplicationCapabilities
              V2_0: true

      Application: &ApplicationDefaults
          Organizations:
          Policies:
              Readers:
                  Type: ImplicitMeta
                  Rule: "ANY Readers"
              Writers:
                  Type: ImplicitMeta
                  Rule: "ANY Writers"
              Admins:
                  Type: ImplicitMeta
                  Rule: "MAJORITY Admins"
              LifecycleEndorsement:
                  Type: ImplicitMeta
                  Rule: "MAJORITY Endorsement"
              Endorsement:
                  Type: ImplicitMeta
                  Rule: "MAJORITY Endorsement"
          Capabilities:
              <<: *ApplicationCapabilities

      Orderer: &OrdererDefaults
          OrdererType: solo
          Addresses:
              - orderer.example.com:7050
          BatchTimeout: 2s
          BatchSize:
              MaxMessageCount: 10
              AbsoluteMaxBytes: 99 MB
              PreferredMaxBytes: 512 KB
          Organizations:
          Policies:
              Readers:
                  Type: ImplicitMeta
                  Rule: "ANY Readers"
              Writers:
                  Type: ImplicitMeta
                  Rule: "ANY Writers"
              Admins:
                  Type: ImplicitMeta
                  Rule: "MAJORITY Admins"
              BlockValidation:
                  Type: ImplicitMeta
                  Rule: "ANY Writers"

      Channel: &ChannelDefaults
          Policies:
              Readers:
                  Type: ImplicitMeta
                  Rule: "ANY Readers"
              Writers:
                  Type: ImplicitMeta
                  Rule: "ANY Writers"
              Admins:
                  Type: ImplicitMeta
                  Rule: "MAJORITY Admins"
          Capabilities:
              <<: *ChannelCapabilities

      Profiles:
          OneOrgOrdererGenesis:
              <<: *ChannelDefaults
              Orderer:
                  <<: *OrdererDefaults
                  Organizations:
                      - *OrdererOrg
                  Capabilities:
                      <<: *OrdererCapabilities
              Consortiums:
                  SampleConsortium:
                      Organizations:
                          - *Org1
          
          OneOrgChannel:
              Consortium: SampleConsortium
              <<: *ChannelDefaults
              Application:
                  <<: *ApplicationDefaults
                  Organizations:
                      - *Org1
                  Capabilities:
                      <<: *ApplicationCapabilities
      EOF
          
          export FABRIC_CFG_PATH=/tmp
          configtxgen -profile OneOrgOrdererGenesis -channelID system-channel -outputBlock /channel-artifacts/genesis.block
          configtxgen -profile OneOrgChannel -outputCreateChannelTx /channel-artifacts/mychannel.tx -channelID mychannel
          configtxgen -profile OneOrgChannel -outputAnchorPeersUpdate /channel-artifacts/Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP
          
          echo "Genesis block generated"
        fi
        
        echo "Crypto setup complete!"
        
        # Verify what was created
        echo "=== Verification ==="
        echo "Genesis block:"
        ls -la /channel-artifacts/genesis.block
        echo "Channel TX:"
        ls -la /channel-artifacts/mychannel.tx
        echo "Orderer MSP:"
        ls -la /crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/keystore/
        
        # Keep container running for debugging if needed
        tail -f /dev/null
      '
    volumes:
      - crypto-config:/crypto-config
      - channel-artifacts:/channel-artifacts
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.5

  # CouchDB for peer state database
  couchdb:
    image: couchdb:3.3
    container_name: couchdb
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    ports:
      - "5984:5984"
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.30
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5984/"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Orderer
  orderer:
    image: hyperledger/fabric-orderer:2.5
    container_name: orderer.example.com
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=file
      - ORDERER_GENERAL_BOOTSTRAPFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=false
      - ORDERER_FILELEDGER_LOCATION=/var/hyperledger/production/orderer
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - channel-artifacts:/channel-artifacts
      - crypto-config:/crypto-config:ro
      - orderer-data:/var/hyperledger/production/orderer
    entrypoint: |
      bash -c '
        # Wait for crypto generation to complete
        echo "Waiting for crypto materials and genesis block..."
        
        # Wait for genesis block in channel-artifacts
        while [ ! -f "/channel-artifacts/genesis.block" ]; do
          echo "Waiting for genesis block to be generated..."
          sleep 2
        done
        
        # Wait for MSP
        while [ ! -d "/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp" ]; do
          echo "Waiting for orderer MSP..."
          sleep 2
        done
        
        # Create orderer directory structure
        mkdir -p /var/hyperledger/orderer
        
        # Copy genesis block to expected location
        echo "Copying genesis block..."
        cp /channel-artifacts/genesis.block /var/hyperledger/orderer/orderer.genesis.block
        
        # Copy MSP to expected location
        echo "Copying MSP..."
        cp -r /crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp /var/hyperledger/orderer/
        
        # Ensure config.yaml exists
        if [ ! -f "/var/hyperledger/orderer/msp/config.yaml" ]; then
          echo "Creating MSP config.yaml"
          cat > /var/hyperledger/orderer/msp/config.yaml <<EOF
      NodeOUs:
        Enable: false
      EOF
        fi
        
        # Verify files exist
        echo "Verifying setup..."
        ls -la /var/hyperledger/orderer/
        ls -la /var/hyperledger/orderer/msp/keystore/
        
        echo "Starting orderer..."
        orderer
      '
    ports:
      - "7050:7050"
    depends_on:
      - crypto-gen
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.10

  # Peer
  peer0:
    image: hyperledger/fabric-peer:2.5
    container_name: peer0.org1.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker-cobol-blockchain_blockchain-net
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=false
      - CORE_CHAINCODE_LOGGING_LEVEL=INFO
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - peer-data:/var/hyperledger/production
      - crypto-config:/crypto-config:ro
    entrypoint: |
      bash -c '
        # Wait for crypto generation
        echo "Waiting for crypto materials..."
        while [ ! -d "/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp" ]; do
          echo "Waiting for peer MSP..."
          sleep 2
        done
        
        # Copy MSP to expected location
        echo "Copying MSP..."
        mkdir -p /etc/hyperledger/fabric/
        cp -r /crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp /etc/hyperledger/fabric/
        
        # Ensure config.yaml exists
        if [ ! -f "/etc/hyperledger/fabric/msp/config.yaml" ]; then
          echo "Creating MSP config.yaml"
          cat > /etc/hyperledger/fabric/msp/config.yaml <<EOF
      NodeOUs:
        Enable: false
      EOF
        fi
        
        # Wait for orderer to be ready
        echo "Waiting for orderer..."
        for i in {1..30}; do
          if timeout 1 bash -c "</dev/tcp/orderer.example.com/7050" 2>/dev/null; then
            echo "Orderer is ready!"
            break
          fi
          echo "Orderer not ready yet... attempt $i/30"
          sleep 2
        done
        
        echo "Starting peer..."
        peer node start
      '
    ports:
      - "7051:7051"
      - "7052:7052"
    depends_on:
      - crypto-gen
      - orderer
      - couchdb
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.20

  # Enhanced COBOL Blockchain Node
  cobol-node:
    build:
      context: .
      dockerfile: dockerfile
    container_name: cobol-metadata-node
    hostname: cobol-metadata-node
    environment:
      - NODE_ENV=development
      - FABRIC_PEER_ENDPOINT=peer0.org1.example.com:7051
      - FABRIC_ORDERER_ENDPOINT=orderer.example.com:7050
      - HEALTH_PORT=8080
      - LOG_LEVEL=INFO
      - COBOL_DEBUG=false
      - BLOCKCHAIN_NETWORK=development
    volumes:
      - cobol-data:/app/data
      - cobol-logs:/app/logs
      - crypto-config:/crypto-config:ro
      - channel-artifacts:/channel-artifacts:ro
    ports:
      - "8080:8080"  # Health API
      - "9090:9090"  # COBOL services
    depends_on:
      - peer0
      - orderer
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.40
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # CLI for Fabric operations
  cli:
    image: hyperledger/fabric-tools:2.5
    container_name: fabric-cli
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    entrypoint: |
      bash -c '
        # Wait for crypto materials
        while [ ! -d "/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" ]; do
          echo "Waiting for admin MSP..."
          sleep 2
        done
        
        # Ensure config.yaml exists for admin MSP
        if [ ! -f "/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml" ]; then
          echo "Creating admin MSP config.yaml"
          cat > /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml <<EOF
      NodeOUs:
        Enable: false
      EOF
        fi
        
        # Keep container running
        /bin/bash
      '
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts
    depends_on:
      - crypto-gen
      - orderer
      - peer0
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.50

  # Network monitoring and diagnostics
  network-monitor:
    image: nicolaka/netshoot
    container_name: network-monitor
    command: sleep infinity
    networks:
      blockchain-net:
        ipv4_address: 172.25.0.60
    volumes:
      - ./scripts:/scripts:ro