# Fixed docker-compose.yml for local COBOL blockchain with proper Fabric integration
version: '3.8'

networks:
  blockchain-net:
    driver: bridge
  fabric-net:
    driver: bridge

volumes:
  cobol-data:
    driver: local
  cobol-logs:
    driver: local
  orderer-data:
    driver: local
  peer-data:
    driver: local
  ca-data:
    driver: local

services:
  # Certificate Authority for the network
  ca.org1.example.com:
    image: hyperledger/fabric-ca:1.5
    container_name: ca.org1.example.com
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.org1.example.com
      - FABRIC_CA_SERVER_TLS_ENABLED=false
      - FABRIC_CA_SERVER_PORT=7054
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ca-data:/etc/hyperledger/fabric-ca-server
    networks:
      - fabric-net
    restart: unless-stopped

  # Orderer service
  orderer.example.com:
    image: hyperledger/fabric-orderer:2.5
    container_name: orderer.example.com
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=false
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:9443
      - ORDERER_METRICS_PROVIDER=prometheus
    volumes:
      - ./fabric-config/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./fabric-config/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
      - orderer-data:/var/hyperledger/production/orderer
    ports:
      - "7050:7050"
      - "9443:9443"
    networks:
      - fabric-net
    depends_on:
      - ca.org1.example.com
    restart: unless-stopped

  # Local Fabric peer
  peer0.org1.example.com:
    image: hyperledger/fabric-peer:2.5
    container_name: peer0.org1.example.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=docker-cobol-blockchain_fabric-net
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      # Gossip configuration - UPDATE THESE IPs
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051,34.170.20.180:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=184.98.199.152:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/msp
      - CORE_PEER_TLS_ENABLED=false
      - CORE_LEDGER_STATE_STATEDATABASE=goleveldb
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9444
      - CORE_METRICS_PROVIDER=prometheus
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ./fabric-config/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
      - peer-data:/var/hyperledger/production
    ports:
      - "7051:7051"
      - "7052:7052"
      - "9444:9444"
    depends_on:
      - orderer.example.com
      - ca.org1.example.com
    networks:
      - fabric-net
      - blockchain-net
    restart: unless-stopped

  # CLI container for Fabric operations
  cli:
    image: hyperledger/fabric-tools:2.5
    container_name: cli
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ./fabric-config/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ./fabric-config/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
      - ./fabric-config/scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts
      - ./chaincode:/opt/gopath/src/github.com/chaincode
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
    networks:
      - fabric-net
    restart: unless-stopped

  # Enhanced COBOL blockchain application
  cobol-metadata-node:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cobol-metadata-node
    environment:
      - NODE_ENV=production
      - FABRIC_CHANNEL=metadata-channel
      - FABRIC_CHAINCODE=metadata-cc
      - FABRIC_PEER_ENDPOINT=peer0.org1.example.com:7051
      - FABRIC_ORDERER_ENDPOINT=orderer.example.com:7050
      - FABRIC_MSP_ID=Org1MSP
      - GCP_PROJECT_ID=metadata-blockchain
      - PUBSUB_TOPIC=blockchain-metadata
      - PUBSUB_SUBSCRIPTION=fabric-ingestion
      - PYTHON_UNBUFFERED=1
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./chaincode:/app/chaincode
      - ./fabric-config/crypto-config:/app/crypto
      - cobol-data:/app/persistent-data
      - cobol-logs:/app/persistent-logs
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"  # Dashboard/API
      - "8081:8081"  # Admin interface
      - "9090:9090"  # Metrics
    networks:
      - blockchain-net
      - fabric-net
    depends_on:
      - peer0.org1.example.com
      - cli
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - blockchain-net
      - fabric-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - blockchain-net
    restart: unless-stopped